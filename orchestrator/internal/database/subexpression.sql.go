// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: subexpression.sql

package database

import (
	"context"
)

const createSubexpression = `-- name: CreateSubexpression :one
INSERT INTO subexpressions (
    expression_id, 
    subexpression_number, 
    subexpression_body, 
    subexpression_status_id, 
    subexpression_result)
VALUES($1, $2, $3, 2, NULL)
RETURNING expression_id, subexpression_number, subexpression_body, subexpression_status_id, subexpression_result
`

type CreateSubexpressionParams struct {
	ExpressionID        string
	SubexpressionNumber int32
	SubexpressionBody   string
}

func (q *Queries) CreateSubexpression(ctx context.Context, arg CreateSubexpressionParams) (Subexpression, error) {
	row := q.db.QueryRowContext(ctx, createSubexpression, arg.ExpressionID, arg.SubexpressionNumber, arg.SubexpressionBody)
	var i Subexpression
	err := row.Scan(
		&i.ExpressionID,
		&i.SubexpressionNumber,
		&i.SubexpressionBody,
		&i.SubexpressionStatusID,
		&i.SubexpressionResult,
	)
	return i, err
}

const getSubexpressionByExprID = `-- name: GetSubexpressionByExprID :many
SELECT expression_id, subexpression_number, subexpression_body, subexpression_status_id, subexpression_result FROM subexpressions WHERE expression_id = $1
`

func (q *Queries) GetSubexpressionByExprID(ctx context.Context, expressionID string) ([]Subexpression, error) {
	rows, err := q.db.QueryContext(ctx, getSubexpressionByExprID, expressionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subexpression
	for rows.Next() {
		var i Subexpression
		if err := rows.Scan(
			&i.ExpressionID,
			&i.SubexpressionNumber,
			&i.SubexpressionBody,
			&i.SubexpressionStatusID,
			&i.SubexpressionResult,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
