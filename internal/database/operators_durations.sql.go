// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: operators_durations.sql

package database

import (
	"context"
)

const editDuration = `-- name: EditDuration :one
UPDATE operators_durations
SET operator_duration = $2
WHERE operator_name = $1
RETURNING operator_name, operator_duration
`

type EditDurationParams struct {
	OperatorName     string
	OperatorDuration float64
}

func (q *Queries) EditDuration(ctx context.Context, arg EditDurationParams) (OperatorsDuration, error) {
	row := q.db.QueryRowContext(ctx, editDuration, arg.OperatorName, arg.OperatorDuration)
	var i OperatorsDuration
	err := row.Scan(&i.OperatorName, &i.OperatorDuration)
	return i, err
}

const getDurationByName = `-- name: GetDurationByName :one
SELECT operator_name, operator_duration FROM operators_durations
WHERE operator_name = $1
`

func (q *Queries) GetDurationByName(ctx context.Context, operatorName string) (OperatorsDuration, error) {
	row := q.db.QueryRowContext(ctx, getDurationByName, operatorName)
	var i OperatorsDuration
	err := row.Scan(&i.OperatorName, &i.OperatorDuration)
	return i, err
}

const getDurations = `-- name: GetDurations :many
SELECT operator_name, operator_duration FROM operators_durations
`

func (q *Queries) GetDurations(ctx context.Context) ([]OperatorsDuration, error) {
	rows, err := q.db.QueryContext(ctx, getDurations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OperatorsDuration
	for rows.Next() {
		var i OperatorsDuration
		if err := rows.Scan(&i.OperatorName, &i.OperatorDuration); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
